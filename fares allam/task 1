1D arrays
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

int n;
   
    scanf("%d", &n);
    if(n>1000 || n<1)
    {
        printf("number invalid");
        return 0;
    }

    int *arr = (int *)malloc(n * sizeof(int)); 

    if (arr == NULL) {
        printf("Memory allocation failed.\n");
        return 1; 
    }

    
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
        if(arr[i]>1000 || arr[i]<1)
    {
        printf("number invalid");
        return 0;
    }
    }

    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

    printf("%d\n", sum);

    free(arr); 

        
    return 0;
}
for loops
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



int main() 
{
    int a, b;
    scanf("%d\n%d", &a, &b);
    if(a<1 || a>b || b > pow(10,6))
    scanf("%d\n%d", &a, &b);
for(int i=a;i<=b;i++)
{
 switch (i) {
     case 1: printf("one\n");
     break;
     case 2 :printf("two\n");
     break;
     case 3 :printf("three\n");
     break;
     case 4: printf("four\n");
     break;
     case 5: printf("five\n");
     break;
     case 6: printf("six\n");
     break;
     case 7: printf("seven\n");
    break;
     case 8: printf("eight\n");
     break;
     case 9: printf("nine\n"); 
     default:break;
}if(i>9){
   if(i%2==0) 
 printf("even\n");
 if(i%2!=0)
 printf("odd\n");
}        
} 
    return 0;
}

conditional statements in c
#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();



int main()
{
    char* n_endptr;
    char* n_str = readline();
    int n = strtol(n_str, &n_endptr, 10);
if(n<1 || n>pow(10,9))
printf("ERROR!");
    if (n_endptr == n_str || *n_endptr != '\0') { exit(EXIT_FAILURE); }

    // Write Your Code Here
    if(n==1)
printf("one");
else if(n==2)
printf("two");
else if(n==3)
printf("three");
else if(n==4)
printf("four");
else if(n==5)
printf("five");
else if(n==6)
printf("six");
else if(n==7)
printf("seven");
else if(n==8)
printf("eight");
else if(n==9)
printf("nine");
else printf("Greater than 9");
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) { break; }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) { break; }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length);

    return data;
}
array reversal
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int num, *arr, i;
    scanf("%d", &num);
    arr = (int*) malloc(num * sizeof(int));
    for(i = 0; i < num; i++) {
        scanf("%d", arr + i);
    }


    /* Write the logic to reverse the array. */
int temp;
    for(i = 0; i < num/2; i++)
     {
      temp=arr[i];
      arr[i] = arr[num - 1 -i];
      arr[num -1 -i]=temp;
     }
     for(i=0;i<num;i++)
     {
         printf("%d ",arr[i]);
     }
     return 0;
}
functions in c
#include <stdio.h>
int max_of_four(int a, int b, int c, int d){
    int max=0;
    if(a>max)
    max=a;
    if(b>max)
    max=b;
    if(c>max)
    max=c;
    if(d>max)
    max=d;
    return max;
}
int main() {
    int a, b, c, d;
    scanf("%d %d %d %d", &a, &b, &c, &d);
    int ans = max_of_four(a, b, c, d);
    printf("%d", ans);
    
    return 0;
}


